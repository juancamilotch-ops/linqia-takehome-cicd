name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  packages: write
  pull-requests: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt || true
        pip install pytest pytest-cov flake8

    - name: Run linter
      run: flake8 sample_app

    - name: Run tests with coverage
      run: pytest --cov=sample_app --cov-report=xml --cov-report=term

    - name: Extract coverage %
      id: cov
      run: |
        python - <<'PY'
        import xml.etree.ElementTree as ET
        r=ET.parse('coverage.xml').getroot()
        pct=float(r.attrib.get('line-rate',0))*100
        print(f"coverage={pct:.2f}")
        open('${{ github.output }}' if False else '/dev/null','w')
        print(f"pct={pct:.2f}", file=open('$GITHUB_OUTPUT','a'))
        PY

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml

    - name: Build Docker image
      run: docker build -t ghcr.io/${{ github.repository }}/sample_app:${{ github.sha }} .

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Docker image
      run: docker push ghcr.io/${{ github.repository }}/sample_app:${{ github.sha }}

    - name: Comment on PR (if PR)
      if: ${{ github.event_name == 'pull_request' }}
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request.number;
          const image = `ghcr.io/${context.repo.owner}/${context.repo.repo}/sample_app:${process.env.GITHUB_SHA}`;
          const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;
          const cov = `${{ steps.cov.outputs.pct }}`
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr,
            body: `**CI Results** ✅\n\n- Image: \`${image}\`\n- Coverage: ${cov}%\n- Artifacts: [See this run](${runUrl})`
          });
